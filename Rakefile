##########################GO-LICENSE-START################################
# Copyright 2014 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################GO-LICENSE-END##################################

require 'json'
require 'open-uri'
# Generated by Buildr 1.3.4, change to your liking
# Version number for this release
VERSION_NUMBER = ENV['GO_VERSION'] || '17.2.0'

# Group identifier for your projects
GROUP = "cruise"

GO_TRUNK_DIRNAME = ENV['GO_TRUNK_DIR'] || 'gocd'
GO_PLUGINS_DIRNAME = ENV['GO_PLUGINS_DIR'] || 'go-plugins'
GO_JOB_RUN_COUNT = ENV['GO_JOB_RUN_COUNT']
GO_JOB_RUN_INDEX = ENV['GO_JOB_RUN_INDEX']
DOWNLOAD_PLUGIN = ENV['DOWNLOAD_PLUGIN'] || "No"

GAUGE_TAGS = ENV["GAUGE_TAGS"]||'smoke,\!manual'
LOAD_BALANCED = GO_JOB_RUN_COUNT && GO_JOB_RUN_INDEX
FIREFOX_BROWSER = ENV['twist_in_firefox'] || 'N'

TASK_PLUGIN_RELEASE_URL = ENV['TASK_PLUGIN_RELEASE_URL'] || "https://api.github.com/repos/gocd-contrib/task-skeleton-plugin/releases/latest"

#discover the revision and commit digest
def stdout_of command
  win_os? && command.gsub!(/'/, '"')
  stdout = `#{command}`
  $?.success? || fail("`#{command}` failed")
  stdout
end

def win_os?
  !!(RbConfig::CONFIG['host_os'] =~ /windows|cygwin|bccwin|cygwin|djgpp|mingw|mswin|mswin32|wince/i)
end

def drop_recreate_pgsql_db
  (puts "Not recreating DB since PostgreSQL is not being used."; return) if ENV['USE_POSTGRESQL'] != 'Y'

  generated_db_name="#{ENV['DB_NAME_PREFIX']}__#{ENV['GO_JOB_NAME']}__#{ENV['GO_STAGE_NAME']}__#{ENV['GO_PIPELINE_NAME']}".gsub(/[^0-9a-zA-Z]/, "_")[0..62]
  ENV['POSTGRES_DB_NAME_TO_USE'] = "#{ENV['DB_NAME_PREFIX'] ? generated_db_name : "cruise"}"
  ENV['POSTGRES_DB_HOST_TO_USE'] = "#{ENV['DB_HOST'] || "localhost"}"


  puts "Using DB: #{ENV['POSTGRES_DB_NAME_TO_USE']} on host: #{ENV['POSTGRES_DB_HOST_TO_USE']}"

  db_user = ENV['DB_USER'] || 'postgres'

  drop_db_command = "java -jar tools/run_with_postgres.jar #{ENV['POSTGRES_DB_HOST_TO_USE']} 5432 postgres #{db_user} '' 'DROP DATABASE IF EXISTS #{ENV['POSTGRES_DB_NAME_TO_USE']}'"
  create_db_command = "java -jar tools/run_with_postgres.jar #{ENV['POSTGRES_DB_HOST_TO_USE']} 5432 postgres #{db_user} '' 'CREATE DATABASE #{ENV['POSTGRES_DB_NAME_TO_USE']}'"
  system("#{drop_db_command} && #{create_db_command}") || (puts "Failed to drop and recreate DB. Tried running: #{drop_db_command} && #{create_db_command}"; exit 1)

  puts "Recreated DB: #{ENV['POSTGRES_DB_NAME_TO_USE']}"
end

drop_recreate_pgsql_db

task :copy_plugins do
  mkdir_p "target/go-server-#{VERSION_NUMBER}/plugins/external"
  cp_r "../#{GO_PLUGINS_DIRNAME}/target/go-plugins-dist/.", "target/go-server-#{VERSION_NUMBER}/plugins/external"
  task_plugin
end

task :copy_agent_server do
  mkdir_p "target"
  mkdir_p "target/test-addon"
  cp_r "../#{GO_TRUNK_DIRNAME}/installers/target/distributions/zip/.", "target"
  cp_r "../#{GO_TRUNK_DIRNAME}/test-addon/target/libs/.", "target/test-addon"
end

task :local_setup_go do
    system("unzip -o target/go-server*.zip -d target")
    system("unzip -o target/go-agent*.zip -d target")
    cp_r "target/test-addon/.", "target/go-server-#{VERSION_NUMBER}/addons"
end

task :setup => [:clean, :copy_agent_server,  :copy_plugins, :local_setup_go]

task :kill_server do
  if win_os?
    system("target\\go-server-#{VERSION_NUMBER}\\stop-server.bat")
  else
    system("pkill -f cruise.jar")
  end
end

def kill_gauge
  system("cmd /c scripts\\kill_gauge.bat")
end

task :killgauge do
  if win_os?
    kill_gauge
  end
end

task :clean do
  if win_os?
    system("cmd /c target\\go-server-#{VERSION_NUMBER}\\stop-server.bat")
    system("cmd /c scripts\\kill_all_go_instances.bat")
    kill_gauge
 else
    sh "scripts/kill_all_go_instances.sh"
    sh "scripts/cleanup-agents.sh"
    rm_rf "target"
    mkdir_p "target"
  end
end

task :cleanup_test_agents do
   if !win_os?
     sh "scripts/cleanup-agents.sh"
   end
end

task :setup_go do
  if win_os?
    system("cmd /c scripts\\setup-go.bat")
  else
    sh "scripts/setup-go.sh"
    task_plugin if DOWNLOAD_PLUGIN != 'No'
  end
  sh "mvn -B -V dependency:resolve dependency:copy-dependencies -DoutputDirectory=libs/"
end

task :gauge_specs do
 if win_os?
    system("cmd /c scripts\\enable_ie_proxy.bat enable ")
 end

 if LOAD_BALANCED
  sh "gauge run --tags=#{GAUGE_TAGS} -n=#{GO_JOB_RUN_COUNT} -g=#{GO_JOB_RUN_INDEX} specs"
 else
  sh "gauge run --tags=#{GAUGE_TAGS} specs"
 end

 if win_os?
    system("cmd /c scripts\\enable_ie_proxy.bat disable ")
 end
end

task "no-test" do
  ENV["test"]="no"
end

task "start_server" do
  sh "cd scripts; ./start-server.sh"
end

task 'bump-schema' do
  version = ENV['VERSION'].to_s

  raise "Please provide VERSION" if version.empty?
  sh("curl --fail --location --silent https://raw.githubusercontent.com/gocd/gocd/master/config/config-server/resources/cruise-config.xsd > src/test/java/cruise-config.xsd")

  Dir["./src/test/java/config/*.xml"].each do |path|
    content = File.read(path)
    if content =~ /xsi:noNamespaceSchemaLocation="cruise-config.xsd"/
      puts "Replacing content in #{path}"
      content = content.gsub(/schemaVersion="\d+"/, %Q{schemaVersion="#{version}"})
      open(path, 'w') {|f| f.write(content)}
    end
  end

  java_file = 'src/test/java/com/thoughtworks/cruise/util/CruiseConstants.java'
  cruiseconstants_contents = File.read(java_file)

  new_contents = []
  cruiseconstants_contents.each_line do |line|
    if line =~ /CONFIG_SCHEMA_VERSION/
      line = "    public static final int CONFIG_SCHEMA_VERSION = #{version};\n"
    else
      line
    end
    new_contents << line
  end

  open(java_file, 'w') do |f|
     f.write(new_contents.join)
   end
end


def task_plugin
  url = JSON.parse(open(TASK_PLUGIN_RELEASE_URL).read)['assets'][0]['browser_download_url']
  sh "wget #{url} -O target/go-server-#{VERSION_NUMBER}/plugins/external/task-skeleton-plugin.jar"
end

task :setup_tfs_cli do
    mkdir_p "tfs-tool"
    sh "wget https://maven-mirrors.gocd.org/repository/s3-mirrors/local/TEE-CLC-14.0.3.zip -O tfs-tool/TEE-CLC-14.0.3.zip"
    sh "unzip tfs-tool/TEE-CLC-14.0.3.zip -d tfs-tool"
    sh "mv tfs-tool/TEE-CLC-14.0.3/* tfs-tool/"
    cd "tfs-tool" do
      sh "yes | ./tf eula; true"
    end
end
